class Solution {
    public int[][] merge(int[][] intervals) {
        //base case
        if (intervals.length == 0)
            return new int[0][0];
        //need to sort the inverals[][] by the starting points
        //take record of the highest end point and continue until we've passed it
        //then we can make that an interval, and add it to the map
        //of intervals and repeat with a new atarting point
        Arrays.sort(intervals, new SortByStartPoint());
        Map<Integer, Integer> intervalMap = new TreeMap<>();

        int start = intervals[0][0];
        int end = intervals[0][1];

        for(int[] interval: intervals){
            //need to check if the intervals overlap
            if(interval[0] <= end){
                //if they do we extend our end point
                if(interval[1] > end){

                    end = interval[1];
                }
            }else{
                //if they don't overalap put the past interval in the map
                //and then start a new one
                intervalMap.put(start,end);
                start = interval[0];
                end = interval[1];
            }

        }
        //now we can add the last interval
        intervalMap.put(start, end);

        //now we have to convert the map to an array
        int[][] intervalArray = new int[intervalMap.size()][2];
        int cell = 0;
        for (int s: intervalMap.keySet()){
            intervalArray[cell++][0] = s;
        }
        cell = 0;
        for(int e: intervalMap.values()){
            intervalArray[cell++][1] = e;
        }
        return intervalArray;
    }
}
// We use a custom comparator to compare the start points of each interval.
class SortByStartPoint implements Comparator<int[]>
{
    public int compare(int[] interval1, int[] interval2)
    {
        return interval1[0] - interval2[0];
    }
}
