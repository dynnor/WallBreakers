class Solution {
    public int findCircleNum(int[][] M) {
        //
        /*
        There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.

Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.


        */

        //if one of the lengths are 0 you are going to return a 0
        if(M.length ==0 || M[0].length == 0)
            return 0;
        int[] checked = new int[M.length];
        int circles = 0;

        //need to check all the students
        for (int row = 0; row < M.length; row++){
            //check their freind connection
            if(checked[row] == 0){
                //want to do a DFS and then increment the circles
                dfs(M, checked, row);
                circles++;

            }
        }
       return circles;
    }

    private void dfs(int[][] M, int[] checked, int row){
        //based on a particular person from the population that we're looking at
        //have to iterate through all their connections
        for(int col = 0; col < M.length; col++){
            //have a connection havent examined then
            if (M[row][col] == 1 && checked[col] == 0){
                //wanna mark that we now visited it
                checked[col] = 1;
                //now do dfs
                dfs(M, checked, col);
            }
        }

    }
}
