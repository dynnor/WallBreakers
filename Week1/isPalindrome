class Solution {
    public boolean isPalindrome(String s) {
        //characteristic of the palindrome - first half has to match the second half
        //split the word into two halves and compare them
        //check to make sure the letters are the same
        //A=a

        int len = s.length();
        int leftIndex = 0;
        int rightIndex = len - 1;

        //will be iterating through the string
        //while we have not checked every character in the string
        while (leftIndex < (len / 2) && rightIndex >= (len / 2))
        {
            // Move the left index to the right until we hit an alphanum char.
            while (leftIndex < (len / 2) && !isAlphaNum(s.charAt(leftIndex)))
                leftIndex++;
            // then, move the right index to the left until we hit an alphanum char.
            while (rightIndex >= (len / 2) && !isAlphaNum(s.charAt(rightIndex)))
                rightIndex--;

            // We could have a palindrome at this point and the rest of the string
            //could contain white space
            //so we can return true
            if (leftIndex >= (len / 2) || rightIndex < (len / 2))
                return true;
            // Otherwise, check that the two alphanums match and return false if they don't.
            if (makeLowercase(s.charAt(leftIndex)) != makeLowercase(s.charAt(rightIndex)))
                return false;

            leftIndex++;
            rightIndex--;
        }

        return true;
    }

    // ----- Helper methods -----

    private boolean isAlphaNum(char in)
    {
        //want an easy way to see if it's a letter or a number
        if ((in >= 'a' && in <= 'z') || (in >= 'A' && in <= 'Z') || (in >= '0' && in <= '9'))
            return true;

        return false;
    }

    private char makeLowercase(char in)
    {
        //if have a capital letter for the sake of the code want to transform it to lowercase so
        //that way we can still identify that they are the same character
        //

        if (in >= 'A' && in <= 'Z')
            return (char) (in + ('a' - 'A'));
        // Otherwise, it doesn't need to change case, so just return the original character.
        return in;
    }
}
