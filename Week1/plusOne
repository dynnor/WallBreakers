class Solution {
    public int[] plusOne(int[] digits) {
     //have to worry about the edge case where
        // all the array is filled with 9's
        //this would require one more than the length
        //999 -> 1000
        //therefore wont set the size of ret[] until we've checked
        //all cases

        boolean all_nines = isAllNines(digits);
        int[] ret = new int[digits.length + (all_nines ? 1: 0)];

        //add one to the rightmost digiit, check if it now equals 10
        //and will require another carry
        //if it does move it to the left

        boolean carry = true;
        for ( int current_digit = digits.length - 1; current_digit >= 0; current_digit--)
        {
            ret[current_digit] = digits[current_digit] + (carry ? 1:0);

            if(ret[current_digit] == 10)
            {
                ret[current_digit] = 0;
                carry = true;
            }
            else
                carry = false;
        }
        //If we have all nines -> then we have a carry so
        //we have to make sure and add stuff
        if(carry)
            ret[0] +=1;

        return ret;
    }

    //helper function that I used before
    private boolean isAllNines(int[] num)
    {

        for (int digit : num )
            if (digit != 9)
                return false;
        return true;
    }
}
